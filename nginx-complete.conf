events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 로그 설정
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # gzip 압축
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # 업스트림 정의 - Docker 컨테이너들
    upstream frontend_container {
        server frontend:3000;
    }
    
    upstream event_service {
        server event-service:3001;
    }
    
    upstream church_service {
        server church-service:3002;
    }
    
    upstream receipt_service {
        server receipt-service:3003;
    }
    
    # SSL 설정 (공통)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HTTP 서버 (포트 80) - HTTPS로 리다이렉트
    server {
        listen 80;
        server_name awanaevent.com www.awanaevent.com;
        
        # Let's Encrypt 인증서 갱신용
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # 나머지 모든 요청은 HTTPS로 리다이렉트
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # HTTPS 서버 (포트 443)
    server {
        listen 443 ssl http2;
        server_name awanaevent.com www.awanaevent.com;
        
        # SSL 인증서 설정
        ssl_certificate /etc/letsencrypt/live/awanaevent.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/awanaevent.com/privkey.pem;
        
        # SSL 인증서가 없을 경우를 위한 임시 설정
        # ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        # ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
        
        # 보안 헤더
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # 프론트엔드 프록시 (Docker 컨테이너)
        location / {
            proxy_pass http://frontend_container;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port 443;
            
            # WebSocket 지원 (React 개발 서버용)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            
            # 타임아웃 설정
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # API 라우팅
        location /api/events/ {
            proxy_pass http://event_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            
            # CORS 헤더
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        location /api/churches/ {
            proxy_pass http://church_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            
            # CORS 헤더
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        location /api/receipts/ {
            proxy_pass http://receipt_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            
            # CORS 헤더
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
    }
    
    # HTTP only 서버 (SSL 없이 테스트용)
    server {
        listen 8080;
        server_name awanaevent.com www.awanaevent.com localhost;
        
        # 프론트엔드 프록시
        location / {
            proxy_pass http://frontend_container;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
            
            # WebSocket 지원
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }
        
        # API 라우팅 (HTTP)
        location /api/events/ {
            proxy_pass http://event_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
        }
        
        location /api/churches/ {
            proxy_pass http://church_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
        }
        
        location /api/receipts/ {
            proxy_pass http://receipt_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
        }
    }
} 