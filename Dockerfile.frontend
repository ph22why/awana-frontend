# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Set memory limit for Node.js
ENV NODE_OPTIONS="--max_old_space_size=8192"

# Copy package files first for better caching
COPY package*.json ./

# Clear npm cache and install dependencies with verbose logging
RUN npm cache clean --force && \
    npm ci --verbose

# Copy source code
COPY . .

# Create build directory if it doesn't exist
RUN mkdir -p build

# Build the application with more memory and error handling
RUN NODE_OPTIONS="--max_old_space_size=8192" npm run build || \
    (echo "First build attempt failed, trying with reduced memory..." && \
     NODE_OPTIONS="--max_old_space_size=4096" npm run build) || \
    (echo "Second build attempt failed, trying without optimization..." && \
     GENERATE_SOURCEMAP=false npm run build)

# Production stage
FROM nginx:alpine

# Copy custom nginx config
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application
COPY --from=builder /app/build /usr/share/nginx/html

# Set proper permissions for nginx
RUN chmod 644 /etc/nginx/nginx.conf

# Expose port
EXPOSE 3000

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 